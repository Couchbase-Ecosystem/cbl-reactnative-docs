"use strict";(self.webpackChunkcbl_reactnative=self.webpackChunkcbl_reactnative||[]).push([[1737],{1271:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"Queries/live-queries","title":"Live Queries","description":"Description - Couchbase Lite Live Query Concepts","source":"@site/docs/Queries/live-queries.md","sourceDirName":"Queries","slug":"/Queries/live-queries","permalink":"/Queries/live-queries","draft":false,"unlisted":false,"editUrl":"https://github.com/Couchbase-Ecosystem/cbl-reactnative-docs/docs/Queries/live-queries.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"id":"live-queries","sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Query Result Sets","permalink":"/Queries/query-result-set"},"next":{"title":"Query Troubleshoooting","permalink":"/Queries/query-troubleshooting"}}');var r=t(4848),s=t(8453);const a={id:"live-queries",sidebar_position:6},o="Live Queries",l={},c=[{value:"Activating a Live Query",id:"activating-a-live-query",level:2},{value:"Example 1. Starting a Live Query - Change Listener",id:"example-1-starting-a-live-query---change-listener",level:4},{value:"Example 2. Stopping a Live Query - Change Listener",id:"example-2-stopping-a-live-query---change-listener",level:4}];function u(e){const i={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.header,{children:(0,r.jsx)(i.h1,{id:"live-queries",children:"Live Queries"})}),"\n",(0,r.jsxs)(i.blockquote,{children:["\n",(0,r.jsxs)(i.p,{children:["Description - ",(0,r.jsx)(i.em,{children:"Couchbase Lite Live Query Concepts"}),"\nRelated Content - ",(0,r.jsx)(i.a,{href:"/Queries/sqlplusplus",children:"SQL++ for Mobile"})]}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"activating-a-live-query",children:"Activating a Live Query"}),"\n",(0,r.jsx)(i.p,{children:"A live query is a query that, once activated, remains active and monitors the database for changes; refreshing the result set whenever a change occurs. As such, it is a great way to build reactive user interfaces\u2009\u2014\u2009especially table/list views\u2009\u2014\u2009that keep themselves up to date."}),"\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.strong,{children:"So, a simple use case may be:"})," A replicator running and pulling new data from a server, whilst a live-query-driven UI automatically updates to show the data without the user having to manually refresh. This helps your app feel quick and responsive."]}),"\n",(0,r.jsx)(i.p,{children:"With Couchbase Lite for React Native, live queries can be watched through:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["Listener callbacks: ",(0,r.jsx)(i.code,{children:"Query.addChangeListener"})]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"Each time you start watching a live query, the query is executed and an initial change notification is dispatched. The query is then kept active and further change notifications are dispatched whenever a change occurs."}),"\n",(0,r.jsx)(i.h4,{id:"example-1-starting-a-live-query---change-listener",children:"Example 1. Starting a Live Query - Change Listener"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-typescript",children:"// Register a change listener and await the Promise returned from the registration call.\nconst token = await query.addChangeListener((change) => {  \n  if (change.error !== null && change.error !== undefined) {  \n    // deal with error...  \n  } else {  \n    const results = change.results;  \n    //loop through ResultSet  \n    for (const doc of results) {  \n      //do something with doc                   \n    }  \n  }  \n}); \n"})}),"\n",(0,r.jsxs)(i.p,{children:["To stop receiving notifications, call ",(0,r.jsx)(i.code,{children:"Query.removeChangeListener"})," with the token that was returned from the registration call. Regardless of the whether the API is synchronous or asynchronous, listeners will stop receiving notifications immediately:"]}),"\n",(0,r.jsx)(i.h4,{id:"example-2-stopping-a-live-query---change-listener",children:"Example 2. Stopping a Live Query - Change Listener"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-typescript",children:"const token = await query.addChangeListener((change) => { ... });\nawait query.removeChangeListener(token);\n"})})]})}function h(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,i,t)=>{t.d(i,{R:()=>a,x:()=>o});var n=t(6540);const r={},s=n.createContext(r);function a(e){const i=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(s.Provider,{value:i},e.children)}}}]);